from copy import deepcopy
n = int(input())
arr = [
    list(map(int, input().split())) for _ in range(n)
]

def serach_generator(d):
    if d == 0:
        for i in range(n):
            for j in range(n):
                yield i, j
    elif d == 1:
        for j in range(n-1, -1, -1):
            for i in range(n):
                yield i, j
    elif d == 2:
        for i in range(n-1, -1, -1):
            for j in range(n):
                yield i, j
    elif d == 3:
        for j in range(n):
            for i in range(n):
                yield i, j

def move(d, board_):
    board = deepcopy(board_)
    if d == 0:
        top = [(0, -1, 0) for _ in range(n)] # num, loc
    elif d == 1:
        top = [(0, n, 0) for _ in range(n)] # num, loc
    elif d == 2:
        top = [(0, n, 0) for _ in range(n)] # num, loc
    elif d == 3:
        top = [(0, -1, 0) for _ in range(n)] # num, loc

    for i, j in serach_generator(d):
        if board[i][j] != 0:
            if d in [0, 2]:
                if top[j][0] == board[i][j] and top[j][2] == 0:
                    top[j] = (top[j][0]*2, top[j][1], 1)
                else:
                    if d in [0, 3]:
                        top[j] = (board[i][j], top[j][1]+1, 0)
                    elif d in [1, 2]:
                        top[j] = (board[i][j], top[j][1]-1, 0)

                board[i][j] = 0
                if d in [0, 2]:
                    board[top[j][1]][j] = top[j][0]
                elif d in [1, 3]:
                    board[i][top[j][1]] = top[j][0]

            elif d in [1, 3]:
                if top[i][0] == board[i][j] and top[i][2] == 0:
                    top[i] = (top[i][0]*2, top[i][1], 1)
                else:
                    if d in [0, 3]:
                        top[i] = (board[i][j], top[i][1]+1, 0)
                    elif d in [1, 2]:
                        top[i] = (board[i][j], top[i][1]-1, 0)

                board[i][j] = 0

                if d in [0, 2]:
                    board[top[i][1]][j] = top[i][0]
                elif d in [1, 3]:
                    board[i][top[i][1]] = top[i][0]

    return board

answer = -1
def search(board, c=0):
    global answer
    answer = max(answer, max([max(board[i]) for i in range(n)]))
    if c == 5:
        return
    for i in range(4):
        b = move(i, board)
        if c+1 <= 5:
            search(b, c+1)

search(arr)
print(answer)

# 7
# 2 2 2 2 2 2 2
# 2 0 2 2 2 2 2
# 2 0 2 2 2 2 2
# 2 0 2 2 2 2 2
# 2 2 2 0 2 2 2 
# 2 2 2 2 2 2 0
# 2 2 2 2 2 2 0

# 20
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024
# 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024 1024

# 10
# 8 8 4 16 32 0 0 8 8 8
# 8 8 4 0 0 8 0 0 0 0
# 16 0 0 16 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 0
# 0 0 0 0 0 0 0 0 0 16
# 0 0 0 0 0 0 0 0 0 2